// Code generated by carrier, DO NOT EDIT.
package carrier

import (
	"github.com/sergot/tibiago/carrier/factory"

	"github.com/sergot/tibiago/ent"
)

// Factory is struct factory wrapper
type Factory struct {
}

// NewFactory return a new struct factory wrapper
func NewFactory() *Factory {
	return &Factory{}
}

// EntFactory is ent factory wrapper
type EntFactory struct {
	bossFactory *factory.EntBossFactory

	bosslistFactory *factory.EntBosslistFactory

	participantFactory *factory.EntParticipantFactory

	instanceFactory *factory.EntInstanceFactory

	instanceConfigFactory *factory.EntInstanceConfigFactory

	client *ent.Client
}

// NewEntFactory return a new ent factory wrapper
func NewEntFactory(client *ent.Client) *EntFactory {
	return &EntFactory{client: client}
}

// Client return wrappper's ent client
func (f *EntFactory) Client() *ent.Client {
	return f.client
}

// EntBossMetaFactory return a new meta factory with given ent client
func EntBossMetaFactory() *factory.EntBossMetaFactory {
	return &factory.EntBossMetaFactory{}
}

// SetBossFactory set a factory in wrapper
func (f *EntFactory) SetBossFactory(c *factory.EntBossFactory) *EntFactory {
	f.bossFactory = c.Client(f.client)
	return f
}

// BossFactory return the EntBossFactory in wrapper
func (f *EntFactory) BossFactory() *factory.EntBossFactory {
	return f.bossFactory
}

// EntBosslistMetaFactory return a new meta factory with given ent client
func EntBosslistMetaFactory() *factory.EntBosslistMetaFactory {
	return &factory.EntBosslistMetaFactory{}
}

// SetBosslistFactory set a factory in wrapper
func (f *EntFactory) SetBosslistFactory(c *factory.EntBosslistFactory) *EntFactory {
	f.bosslistFactory = c.Client(f.client)
	return f
}

// BosslistFactory return the EntBosslistFactory in wrapper
func (f *EntFactory) BosslistFactory() *factory.EntBosslistFactory {
	return f.bosslistFactory
}

// EntParticipantMetaFactory return a new meta factory with given ent client
func EntParticipantMetaFactory() *factory.EntParticipantMetaFactory {
	return &factory.EntParticipantMetaFactory{}
}

// SetParticipantFactory set a factory in wrapper
func (f *EntFactory) SetParticipantFactory(c *factory.EntParticipantFactory) *EntFactory {
	f.participantFactory = c.Client(f.client)
	return f
}

// ParticipantFactory return the EntParticipantFactory in wrapper
func (f *EntFactory) ParticipantFactory() *factory.EntParticipantFactory {
	return f.participantFactory
}

// EntInstanceMetaFactory return a new meta factory with given ent client
func EntInstanceMetaFactory() *factory.EntInstanceMetaFactory {
	return &factory.EntInstanceMetaFactory{}
}

// SetInstanceFactory set a factory in wrapper
func (f *EntFactory) SetInstanceFactory(c *factory.EntInstanceFactory) *EntFactory {
	f.instanceFactory = c.Client(f.client)
	return f
}

// InstanceFactory return the EntInstanceFactory in wrapper
func (f *EntFactory) InstanceFactory() *factory.EntInstanceFactory {
	return f.instanceFactory
}

// EntInstanceConfigMetaFactory return a new meta factory with given ent client
func EntInstanceConfigMetaFactory() *factory.EntInstanceConfigMetaFactory {
	return &factory.EntInstanceConfigMetaFactory{}
}

// SetInstanceConfigFactory set a factory in wrapper
func (f *EntFactory) SetInstanceConfigFactory(c *factory.EntInstanceConfigFactory) *EntFactory {
	f.instanceConfigFactory = c.Client(f.client)
	return f
}

// InstanceConfigFactory return the EntInstanceConfigFactory in wrapper
func (f *EntFactory) InstanceConfigFactory() *factory.EntInstanceConfigFactory {
	return f.instanceConfigFactory
}
