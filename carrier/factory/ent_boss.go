// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/sergot/tibiago/ent"

	"github.com/google/uuid"

	"context"
)

type EntBossMutator struct {
	ID uuid.UUID

	Name string

	Template string

	_creator *ent.BossCreate
}

func (m *EntBossMutator) EntCreator() *ent.BossCreate {
	return m._creator
}

type entBossMutation struct {
	iDType int
	iDFunc func(ctx context.Context, i *EntBossMutator, c int) error

	nameType int
	nameFunc func(ctx context.Context, i *EntBossMutator, c int) error

	templateType int
	templateFunc func(ctx context.Context, i *EntBossMutator, c int) error

	beforeCreateFunc func(ctx context.Context, i *EntBossMutator) error
	afterCreateFunc  func(ctx context.Context, i *ent.Boss) error
}
type EntBossMetaFactory struct {
	mutation entBossMutation
}
type entBossTrait struct {
	mutation entBossMutation
	updates  []func(m *entBossMutation)
}

func EntBossTrait() *entBossTrait {
	return &entBossTrait{}
}
func (*entBossMutation) beforeCreateMutateFunc(fn func(ctx context.Context, i *EntBossMutator) error) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.beforeCreateFunc = fn
	}
}
func (*entBossMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *ent.Boss) error) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.afterCreateFunc = fn
	}
}

func (*entBossMutation) iDSequenceMutateFunc(fn func(ctx context.Context, i int) (uuid.UUID, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.iDType = TypeSequence
		m.iDFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetID(value)

			i.ID = value
			return nil
		}
	}
}
func (*entBossMutation) iDLazyMutateFunc(fn func(ctx context.Context, i *EntBossMutator) (uuid.UUID, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.iDType = TypeLazy
		m.iDFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetID(value)

			i.ID = value
			return nil
		}
	}
}
func (*entBossMutation) iDDefaultMutateFunc(v uuid.UUID) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.iDType = TypeDefault
		m.iDFunc = func(ctx context.Context, i *EntBossMutator, c int) error {

			i.EntCreator().SetID(v)

			i.ID = v
			return nil
		}
	}
}
func (*entBossMutation) iDFactoryMutateFunc(fn func(ctx context.Context) (uuid.UUID, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.iDType = TypeFactory
		m.iDFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetID(value)

			i.ID = value

			return nil
		}
	}
}

// SetIDSequence register a function which accept a sequence counter and set return value to ID field
func (f *EntBossMetaFactory) SetIDSequence(fn func(ctx context.Context, i int) (uuid.UUID, error)) *EntBossMetaFactory {
	f.mutation.iDSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetIDLazy register a function which accept the build struct and set return value to ID field
func (f *EntBossMetaFactory) SetIDLazy(fn func(ctx context.Context, i *EntBossMutator) (uuid.UUID, error)) *EntBossMetaFactory {
	f.mutation.iDLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetIDDefault assign a default value to ID field
func (f *EntBossMetaFactory) SetIDDefault(v uuid.UUID) *EntBossMetaFactory {
	f.mutation.iDDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetIDFactory register a factory function and assign return value to ID, you can also use related factory's Create/CreateV as input function here
func (f *EntBossMetaFactory) SetIDFactory(fn func(ctx context.Context) (uuid.UUID, error)) *EntBossMetaFactory {
	f.mutation.iDFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetIDSequence register a function which accept a sequence counter and set return value to ID field
func (t *entBossTrait) SetIDSequence(fn func(ctx context.Context, i int) (uuid.UUID, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.iDSequenceMutateFunc(fn))
	return t
}

// SetIDLazy register a function which accept the build struct and set return value to ID field
func (t *entBossTrait) SetIDLazy(fn func(ctx context.Context, i *EntBossMutator) (uuid.UUID, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.iDLazyMutateFunc(fn))
	return t
}

// SetIDDefault assign a default value to ID field
func (t *entBossTrait) SetIDDefault(v uuid.UUID) *entBossTrait {
	t.updates = append(t.updates, t.mutation.iDDefaultMutateFunc(v))
	return t
}

// SetIDFactory register a factory function and assign return value to ID, you can also use related factory's Create/CreateV as input function here
func (t *entBossTrait) SetIDFactory(fn func(ctx context.Context) (uuid.UUID, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.iDFactoryMutateFunc(fn))
	return t
}

func (*entBossMutation) nameSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.nameType = TypeSequence
		m.nameFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		}
	}
}
func (*entBossMutation) nameLazyMutateFunc(fn func(ctx context.Context, i *EntBossMutator) (string, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.nameType = TypeLazy
		m.nameFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		}
	}
}
func (*entBossMutation) nameDefaultMutateFunc(v string) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.nameType = TypeDefault
		m.nameFunc = func(ctx context.Context, i *EntBossMutator, c int) error {

			i.EntCreator().SetName(v)

			i.Name = v
			return nil
		}
	}
}
func (*entBossMutation) nameFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.nameType = TypeFactory
		m.nameFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value

			return nil
		}
	}
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (f *EntBossMetaFactory) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *EntBossMetaFactory {
	f.mutation.nameSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (f *EntBossMetaFactory) SetNameLazy(fn func(ctx context.Context, i *EntBossMutator) (string, error)) *EntBossMetaFactory {
	f.mutation.nameLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameDefault assign a default value to Name field
func (f *EntBossMetaFactory) SetNameDefault(v string) *EntBossMetaFactory {
	f.mutation.nameDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (f *EntBossMetaFactory) SetNameFactory(fn func(ctx context.Context) (string, error)) *EntBossMetaFactory {
	f.mutation.nameFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (t *entBossTrait) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.nameSequenceMutateFunc(fn))
	return t
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (t *entBossTrait) SetNameLazy(fn func(ctx context.Context, i *EntBossMutator) (string, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.nameLazyMutateFunc(fn))
	return t
}

// SetNameDefault assign a default value to Name field
func (t *entBossTrait) SetNameDefault(v string) *entBossTrait {
	t.updates = append(t.updates, t.mutation.nameDefaultMutateFunc(v))
	return t
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (t *entBossTrait) SetNameFactory(fn func(ctx context.Context) (string, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.nameFactoryMutateFunc(fn))
	return t
}

func (*entBossMutation) templateSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.templateType = TypeSequence
		m.templateFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetTemplate(value)

			i.Template = value
			return nil
		}
	}
}
func (*entBossMutation) templateLazyMutateFunc(fn func(ctx context.Context, i *EntBossMutator) (string, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.templateType = TypeLazy
		m.templateFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetTemplate(value)

			i.Template = value
			return nil
		}
	}
}
func (*entBossMutation) templateDefaultMutateFunc(v string) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.templateType = TypeDefault
		m.templateFunc = func(ctx context.Context, i *EntBossMutator, c int) error {

			i.EntCreator().SetTemplate(v)

			i.Template = v
			return nil
		}
	}
}
func (*entBossMutation) templateFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *entBossMutation) {
	return func(m *entBossMutation) {
		m.templateType = TypeFactory
		m.templateFunc = func(ctx context.Context, i *EntBossMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetTemplate(value)

			i.Template = value

			return nil
		}
	}
}

// SetTemplateSequence register a function which accept a sequence counter and set return value to Template field
func (f *EntBossMetaFactory) SetTemplateSequence(fn func(ctx context.Context, i int) (string, error)) *EntBossMetaFactory {
	f.mutation.templateSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetTemplateLazy register a function which accept the build struct and set return value to Template field
func (f *EntBossMetaFactory) SetTemplateLazy(fn func(ctx context.Context, i *EntBossMutator) (string, error)) *EntBossMetaFactory {
	f.mutation.templateLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetTemplateDefault assign a default value to Template field
func (f *EntBossMetaFactory) SetTemplateDefault(v string) *EntBossMetaFactory {
	f.mutation.templateDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetTemplateFactory register a factory function and assign return value to Template, you can also use related factory's Create/CreateV as input function here
func (f *EntBossMetaFactory) SetTemplateFactory(fn func(ctx context.Context) (string, error)) *EntBossMetaFactory {
	f.mutation.templateFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetTemplateSequence register a function which accept a sequence counter and set return value to Template field
func (t *entBossTrait) SetTemplateSequence(fn func(ctx context.Context, i int) (string, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.templateSequenceMutateFunc(fn))
	return t
}

// SetTemplateLazy register a function which accept the build struct and set return value to Template field
func (t *entBossTrait) SetTemplateLazy(fn func(ctx context.Context, i *EntBossMutator) (string, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.templateLazyMutateFunc(fn))
	return t
}

// SetTemplateDefault assign a default value to Template field
func (t *entBossTrait) SetTemplateDefault(v string) *entBossTrait {
	t.updates = append(t.updates, t.mutation.templateDefaultMutateFunc(v))
	return t
}

// SetTemplateFactory register a factory function and assign return value to Template, you can also use related factory's Create/CreateV as input function here
func (t *entBossTrait) SetTemplateFactory(fn func(ctx context.Context) (string, error)) *entBossTrait {
	t.updates = append(t.updates, t.mutation.templateFactoryMutateFunc(fn))
	return t
}

// SetAfterCreateFunc register a function to be called after struct create
func (f *EntBossMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.Boss) error) *EntBossMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}

// SetBeforeCreateFunc register a function to be called before struct create
func (f *EntBossMetaFactory) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntBossMutator) error) *EntBossMetaFactory {
	f.mutation.beforeCreateFunc = fn
	return f
}

// SetAfterCreateFunc register a function to be called after struct create
func (t *entBossTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.Boss) error) *entBossTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

// SetBeforeCreateFunc register a function to be called before struct create
func (t *entBossTrait) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntBossMutator) error) *entBossTrait {
	t.updates = append(t.updates, t.mutation.beforeCreateMutateFunc(fn))
	return t
}

// Build create a  EntBossFactory from EntBossMetaFactory
func (f *EntBossMetaFactory) Build() *EntBossFactory {
	return &EntBossFactory{meta: *f, counter: &Counter{}}
}

type EntBossFactory struct {
	meta    EntBossMetaFactory
	counter *Counter

	client *ent.Client
}

// SetID set the ID field
func (f *EntBossFactory) SetID(i uuid.UUID) *EntBossBuilder {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetID(i)

	builder.client = f.client

	return builder
}

// SetName set the Name field
func (f *EntBossFactory) SetName(i string) *EntBossBuilder {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetName(i)

	builder.client = f.client

	return builder
}

// SetTemplate set the Template field
func (f *EntBossFactory) SetTemplate(i string) *EntBossBuilder {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetTemplate(i)

	builder.client = f.client

	return builder
}

// Create return a new *ent.Boss
func (f *EntBossFactory) Create(ctx context.Context) (*ent.Boss, error) {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.Create(ctx)
}

// CreateV return a new ent.Boss
func (f *EntBossFactory) CreateV(ctx context.Context) (ent.Boss, error) {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateV(ctx)
}

// CreateBatch return a []*ent.Boss slice
func (f *EntBossFactory) CreateBatch(ctx context.Context, n int) ([]*ent.Boss, error) {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatch(ctx, n)
}

// CreateBatchV return a []ent.Boss slice
func (f *EntBossFactory) CreateBatchV(ctx context.Context, n int) ([]ent.Boss, error) {
	builder := &EntBossBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatchV(ctx, n)
}

// Client set ent client to EntBossFactory
func (f *EntBossFactory) Client(c *ent.Client) *EntBossFactory {
	f.client = c
	return f
}

type EntBossBuilder struct {
	factory  *EntBossFactory
	mutation entBossMutation
	counter  *Counter

	iDOverride  uuid.UUID
	iDOverriden bool

	nameOverride  string
	nameOverriden bool

	templateOverride  string
	templateOverriden bool

	client *ent.Client
}

func (b *EntBossBuilder) Client(c *ent.Client) *EntBossBuilder {
	b.client = c
	return b
}

// SetID set the ID field
func (b *EntBossBuilder) SetID(i uuid.UUID) *EntBossBuilder {
	b.iDOverride = i
	b.iDOverriden = true
	return b
}

// SetName set the Name field
func (b *EntBossBuilder) SetName(i string) *EntBossBuilder {
	b.nameOverride = i
	b.nameOverriden = true
	return b
}

// SetTemplate set the Template field
func (b *EntBossBuilder) SetTemplate(i string) *EntBossBuilder {
	b.templateOverride = i
	b.templateOverriden = true
	return b
}

// CreateV return a new ent.Boss
func (b *EntBossBuilder) CreateV(ctx context.Context) (ent.Boss, error) {
	var d ent.Boss
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

// Create return a new *ent.Boss
func (b *EntBossBuilder) Create(ctx context.Context) (*ent.Boss, error) {

	var preSlice = []func(ctx context.Context, i *EntBossMutator, c int) error{}
	var lazySlice = []func(ctx context.Context, i *EntBossMutator, c int) error{}
	var postSlice = []func(ctx context.Context, i *ent.Boss, c int) error{}

	index := b.counter.Get()
	_ = index

	client := b.client
	entBuilder := client.Boss.Create()

	if b.iDOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBossMutator, c int) error {
			value := b.iDOverride

			i.EntCreator().SetID(value)

			i.ID = value
			return nil
		})
	} else {
		switch b.mutation.iDType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.iDFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.iDFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.iDFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.iDFunc)
		}
	}

	if b.nameOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBossMutator, c int) error {
			value := b.nameOverride

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		})
	} else {
		switch b.mutation.nameType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.nameFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.nameFunc)
		}
	}

	if b.templateOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBossMutator, c int) error {
			value := b.templateOverride

			i.EntCreator().SetTemplate(value)

			i.Template = value
			return nil
		})
	} else {
		switch b.mutation.templateType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.templateFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.templateFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.templateFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.templateFunc)
		}
	}

	v := &EntBossMutator{}

	v._creator = entBuilder

	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	if b.mutation.beforeCreateFunc != nil {
		if err := b.mutation.beforeCreateFunc(ctx, v); err != nil {
			return nil, err
		}
	}

	new, err := entBuilder.Save(ctx)
	if err != nil {
		return nil, err
	}

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {
		err := f(ctx, new, index)
		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *EntBossBuilder) CreateBatch(ctx context.Context, n int) ([]*ent.Boss, error) {
	var results []*ent.Boss
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *EntBossBuilder) CreateBatchV(ctx context.Context, n int) ([]ent.Boss, error) {
	var results []ent.Boss
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
