// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/google/uuid"

	"time"

	"github.com/sergot/tibiago/ent"

	"context"
)

type EntBosslistMutator struct {
	Boss *ent.Boss

	BossID uuid.UUID

	CreatedAt time.Time

	CustomTemplate string

	DiscordMessageID string

	ID uuid.UUID

	StartsAt time.Time

	_creator *ent.BosslistCreate
}

func (m *EntBosslistMutator) EntCreator() *ent.BosslistCreate {
	return m._creator
}

type entBosslistMutation struct {
	bossType int
	bossFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	bossIDType int
	bossIDFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	createdAtType int
	createdAtFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	customTemplateType int
	customTemplateFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	discordMessageIDType int
	discordMessageIDFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	iDType int
	iDFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	startsAtType int
	startsAtFunc func(ctx context.Context, i *EntBosslistMutator, c int) error

	beforeCreateFunc func(ctx context.Context, i *EntBosslistMutator) error
	afterCreateFunc  func(ctx context.Context, i *ent.Bosslist) error
}
type EntBosslistMetaFactory struct {
	mutation entBosslistMutation
}
type entBosslistTrait struct {
	mutation entBosslistMutation
	updates  []func(m *entBosslistMutation)
}

func EntBosslistTrait() *entBosslistTrait {
	return &entBosslistTrait{}
}
func (*entBosslistMutation) beforeCreateMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) error) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.beforeCreateFunc = fn
	}
}
func (*entBosslistMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *ent.Bosslist) error) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.afterCreateFunc = fn
	}
}

func (*entBosslistMutation) bossSequenceMutateFunc(fn func(ctx context.Context, i int) (*ent.Boss, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossType = TypeSequence
		m.bossFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetBoss(value)

			i.Boss = value
			return nil
		}
	}
}
func (*entBosslistMutation) bossLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (*ent.Boss, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossType = TypeLazy
		m.bossFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetBoss(value)

			i.Boss = value
			return nil
		}
	}
}
func (*entBosslistMutation) bossDefaultMutateFunc(v *ent.Boss) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossType = TypeDefault
		m.bossFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetBoss(v)

			i.Boss = v
			return nil
		}
	}
}
func (*entBosslistMutation) bossFactoryMutateFunc(fn func(ctx context.Context) (*ent.Boss, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossType = TypeFactory
		m.bossFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetBoss(value)

			i.Boss = value

			return nil
		}
	}
}

// SetBossSequence register a function which accept a sequence counter and set return value to Boss field
func (f *EntBosslistMetaFactory) SetBossSequence(fn func(ctx context.Context, i int) (*ent.Boss, error)) *EntBosslistMetaFactory {
	f.mutation.bossSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetBossLazy register a function which accept the build struct and set return value to Boss field
func (f *EntBosslistMetaFactory) SetBossLazy(fn func(ctx context.Context, i *EntBosslistMutator) (*ent.Boss, error)) *EntBosslistMetaFactory {
	f.mutation.bossLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetBossDefault assign a default value to Boss field
func (f *EntBosslistMetaFactory) SetBossDefault(v *ent.Boss) *EntBosslistMetaFactory {
	f.mutation.bossDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetBossFactory register a factory function and assign return value to Boss, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetBossFactory(fn func(ctx context.Context) (*ent.Boss, error)) *EntBosslistMetaFactory {
	f.mutation.bossFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetBossSequence register a function which accept a sequence counter and set return value to Boss field
func (t *entBosslistTrait) SetBossSequence(fn func(ctx context.Context, i int) (*ent.Boss, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossSequenceMutateFunc(fn))
	return t
}

// SetBossLazy register a function which accept the build struct and set return value to Boss field
func (t *entBosslistTrait) SetBossLazy(fn func(ctx context.Context, i *EntBosslistMutator) (*ent.Boss, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossLazyMutateFunc(fn))
	return t
}

// SetBossDefault assign a default value to Boss field
func (t *entBosslistTrait) SetBossDefault(v *ent.Boss) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossDefaultMutateFunc(v))
	return t
}

// SetBossFactory register a factory function and assign return value to Boss, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetBossFactory(fn func(ctx context.Context) (*ent.Boss, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossFactoryMutateFunc(fn))
	return t
}

func (*entBosslistMutation) bossIDSequenceMutateFunc(fn func(ctx context.Context, i int) (uuid.UUID, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossIDType = TypeSequence
		m.bossIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetBossID(value)

			i.BossID = value
			return nil
		}
	}
}
func (*entBosslistMutation) bossIDLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (uuid.UUID, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossIDType = TypeLazy
		m.bossIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetBossID(value)

			i.BossID = value
			return nil
		}
	}
}
func (*entBosslistMutation) bossIDDefaultMutateFunc(v uuid.UUID) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossIDType = TypeDefault
		m.bossIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetBossID(v)

			i.BossID = v
			return nil
		}
	}
}
func (*entBosslistMutation) bossIDFactoryMutateFunc(fn func(ctx context.Context) (uuid.UUID, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.bossIDType = TypeFactory
		m.bossIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetBossID(value)

			i.BossID = value

			return nil
		}
	}
}

// SetBossIDSequence register a function which accept a sequence counter and set return value to BossID field
func (f *EntBosslistMetaFactory) SetBossIDSequence(fn func(ctx context.Context, i int) (uuid.UUID, error)) *EntBosslistMetaFactory {
	f.mutation.bossIDSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetBossIDLazy register a function which accept the build struct and set return value to BossID field
func (f *EntBosslistMetaFactory) SetBossIDLazy(fn func(ctx context.Context, i *EntBosslistMutator) (uuid.UUID, error)) *EntBosslistMetaFactory {
	f.mutation.bossIDLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetBossIDDefault assign a default value to BossID field
func (f *EntBosslistMetaFactory) SetBossIDDefault(v uuid.UUID) *EntBosslistMetaFactory {
	f.mutation.bossIDDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetBossIDFactory register a factory function and assign return value to BossID, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetBossIDFactory(fn func(ctx context.Context) (uuid.UUID, error)) *EntBosslistMetaFactory {
	f.mutation.bossIDFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetBossIDSequence register a function which accept a sequence counter and set return value to BossID field
func (t *entBosslistTrait) SetBossIDSequence(fn func(ctx context.Context, i int) (uuid.UUID, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossIDSequenceMutateFunc(fn))
	return t
}

// SetBossIDLazy register a function which accept the build struct and set return value to BossID field
func (t *entBosslistTrait) SetBossIDLazy(fn func(ctx context.Context, i *EntBosslistMutator) (uuid.UUID, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossIDLazyMutateFunc(fn))
	return t
}

// SetBossIDDefault assign a default value to BossID field
func (t *entBosslistTrait) SetBossIDDefault(v uuid.UUID) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossIDDefaultMutateFunc(v))
	return t
}

// SetBossIDFactory register a factory function and assign return value to BossID, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetBossIDFactory(fn func(ctx context.Context) (uuid.UUID, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.bossIDFactoryMutateFunc(fn))
	return t
}

func (*entBosslistMutation) createdAtSequenceMutateFunc(fn func(ctx context.Context, i int) (time.Time, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.createdAtType = TypeSequence
		m.createdAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetCreatedAt(value)

			i.CreatedAt = value
			return nil
		}
	}
}
func (*entBosslistMutation) createdAtLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (time.Time, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.createdAtType = TypeLazy
		m.createdAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetCreatedAt(value)

			i.CreatedAt = value
			return nil
		}
	}
}
func (*entBosslistMutation) createdAtDefaultMutateFunc(v time.Time) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.createdAtType = TypeDefault
		m.createdAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetCreatedAt(v)

			i.CreatedAt = v
			return nil
		}
	}
}
func (*entBosslistMutation) createdAtFactoryMutateFunc(fn func(ctx context.Context) (time.Time, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.createdAtType = TypeFactory
		m.createdAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetCreatedAt(value)

			i.CreatedAt = value

			return nil
		}
	}
}

// SetCreatedAtSequence register a function which accept a sequence counter and set return value to CreatedAt field
func (f *EntBosslistMetaFactory) SetCreatedAtSequence(fn func(ctx context.Context, i int) (time.Time, error)) *EntBosslistMetaFactory {
	f.mutation.createdAtSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetCreatedAtLazy register a function which accept the build struct and set return value to CreatedAt field
func (f *EntBosslistMetaFactory) SetCreatedAtLazy(fn func(ctx context.Context, i *EntBosslistMutator) (time.Time, error)) *EntBosslistMetaFactory {
	f.mutation.createdAtLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetCreatedAtDefault assign a default value to CreatedAt field
func (f *EntBosslistMetaFactory) SetCreatedAtDefault(v time.Time) *EntBosslistMetaFactory {
	f.mutation.createdAtDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetCreatedAtFactory register a factory function and assign return value to CreatedAt, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetCreatedAtFactory(fn func(ctx context.Context) (time.Time, error)) *EntBosslistMetaFactory {
	f.mutation.createdAtFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetCreatedAtSequence register a function which accept a sequence counter and set return value to CreatedAt field
func (t *entBosslistTrait) SetCreatedAtSequence(fn func(ctx context.Context, i int) (time.Time, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.createdAtSequenceMutateFunc(fn))
	return t
}

// SetCreatedAtLazy register a function which accept the build struct and set return value to CreatedAt field
func (t *entBosslistTrait) SetCreatedAtLazy(fn func(ctx context.Context, i *EntBosslistMutator) (time.Time, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.createdAtLazyMutateFunc(fn))
	return t
}

// SetCreatedAtDefault assign a default value to CreatedAt field
func (t *entBosslistTrait) SetCreatedAtDefault(v time.Time) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.createdAtDefaultMutateFunc(v))
	return t
}

// SetCreatedAtFactory register a factory function and assign return value to CreatedAt, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetCreatedAtFactory(fn func(ctx context.Context) (time.Time, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.createdAtFactoryMutateFunc(fn))
	return t
}

func (*entBosslistMutation) customTemplateSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.customTemplateType = TypeSequence
		m.customTemplateFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetCustomTemplate(value)

			i.CustomTemplate = value
			return nil
		}
	}
}
func (*entBosslistMutation) customTemplateLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (string, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.customTemplateType = TypeLazy
		m.customTemplateFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetCustomTemplate(value)

			i.CustomTemplate = value
			return nil
		}
	}
}
func (*entBosslistMutation) customTemplateDefaultMutateFunc(v string) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.customTemplateType = TypeDefault
		m.customTemplateFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetCustomTemplate(v)

			i.CustomTemplate = v
			return nil
		}
	}
}
func (*entBosslistMutation) customTemplateFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.customTemplateType = TypeFactory
		m.customTemplateFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetCustomTemplate(value)

			i.CustomTemplate = value

			return nil
		}
	}
}

// SetCustomTemplateSequence register a function which accept a sequence counter and set return value to CustomTemplate field
func (f *EntBosslistMetaFactory) SetCustomTemplateSequence(fn func(ctx context.Context, i int) (string, error)) *EntBosslistMetaFactory {
	f.mutation.customTemplateSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetCustomTemplateLazy register a function which accept the build struct and set return value to CustomTemplate field
func (f *EntBosslistMetaFactory) SetCustomTemplateLazy(fn func(ctx context.Context, i *EntBosslistMutator) (string, error)) *EntBosslistMetaFactory {
	f.mutation.customTemplateLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetCustomTemplateDefault assign a default value to CustomTemplate field
func (f *EntBosslistMetaFactory) SetCustomTemplateDefault(v string) *EntBosslistMetaFactory {
	f.mutation.customTemplateDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetCustomTemplateFactory register a factory function and assign return value to CustomTemplate, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetCustomTemplateFactory(fn func(ctx context.Context) (string, error)) *EntBosslistMetaFactory {
	f.mutation.customTemplateFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetCustomTemplateSequence register a function which accept a sequence counter and set return value to CustomTemplate field
func (t *entBosslistTrait) SetCustomTemplateSequence(fn func(ctx context.Context, i int) (string, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.customTemplateSequenceMutateFunc(fn))
	return t
}

// SetCustomTemplateLazy register a function which accept the build struct and set return value to CustomTemplate field
func (t *entBosslistTrait) SetCustomTemplateLazy(fn func(ctx context.Context, i *EntBosslistMutator) (string, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.customTemplateLazyMutateFunc(fn))
	return t
}

// SetCustomTemplateDefault assign a default value to CustomTemplate field
func (t *entBosslistTrait) SetCustomTemplateDefault(v string) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.customTemplateDefaultMutateFunc(v))
	return t
}

// SetCustomTemplateFactory register a factory function and assign return value to CustomTemplate, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetCustomTemplateFactory(fn func(ctx context.Context) (string, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.customTemplateFactoryMutateFunc(fn))
	return t
}

func (*entBosslistMutation) discordMessageIDSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.discordMessageIDType = TypeSequence
		m.discordMessageIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetDiscordMessageID(value)

			i.DiscordMessageID = value
			return nil
		}
	}
}
func (*entBosslistMutation) discordMessageIDLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (string, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.discordMessageIDType = TypeLazy
		m.discordMessageIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetDiscordMessageID(value)

			i.DiscordMessageID = value
			return nil
		}
	}
}
func (*entBosslistMutation) discordMessageIDDefaultMutateFunc(v string) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.discordMessageIDType = TypeDefault
		m.discordMessageIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetDiscordMessageID(v)

			i.DiscordMessageID = v
			return nil
		}
	}
}
func (*entBosslistMutation) discordMessageIDFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.discordMessageIDType = TypeFactory
		m.discordMessageIDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetDiscordMessageID(value)

			i.DiscordMessageID = value

			return nil
		}
	}
}

// SetDiscordMessageIDSequence register a function which accept a sequence counter and set return value to DiscordMessageID field
func (f *EntBosslistMetaFactory) SetDiscordMessageIDSequence(fn func(ctx context.Context, i int) (string, error)) *EntBosslistMetaFactory {
	f.mutation.discordMessageIDSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetDiscordMessageIDLazy register a function which accept the build struct and set return value to DiscordMessageID field
func (f *EntBosslistMetaFactory) SetDiscordMessageIDLazy(fn func(ctx context.Context, i *EntBosslistMutator) (string, error)) *EntBosslistMetaFactory {
	f.mutation.discordMessageIDLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetDiscordMessageIDDefault assign a default value to DiscordMessageID field
func (f *EntBosslistMetaFactory) SetDiscordMessageIDDefault(v string) *EntBosslistMetaFactory {
	f.mutation.discordMessageIDDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetDiscordMessageIDFactory register a factory function and assign return value to DiscordMessageID, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetDiscordMessageIDFactory(fn func(ctx context.Context) (string, error)) *EntBosslistMetaFactory {
	f.mutation.discordMessageIDFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetDiscordMessageIDSequence register a function which accept a sequence counter and set return value to DiscordMessageID field
func (t *entBosslistTrait) SetDiscordMessageIDSequence(fn func(ctx context.Context, i int) (string, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.discordMessageIDSequenceMutateFunc(fn))
	return t
}

// SetDiscordMessageIDLazy register a function which accept the build struct and set return value to DiscordMessageID field
func (t *entBosslistTrait) SetDiscordMessageIDLazy(fn func(ctx context.Context, i *EntBosslistMutator) (string, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.discordMessageIDLazyMutateFunc(fn))
	return t
}

// SetDiscordMessageIDDefault assign a default value to DiscordMessageID field
func (t *entBosslistTrait) SetDiscordMessageIDDefault(v string) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.discordMessageIDDefaultMutateFunc(v))
	return t
}

// SetDiscordMessageIDFactory register a factory function and assign return value to DiscordMessageID, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetDiscordMessageIDFactory(fn func(ctx context.Context) (string, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.discordMessageIDFactoryMutateFunc(fn))
	return t
}

func (*entBosslistMutation) iDSequenceMutateFunc(fn func(ctx context.Context, i int) (uuid.UUID, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.iDType = TypeSequence
		m.iDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetID(value)

			i.ID = value
			return nil
		}
	}
}
func (*entBosslistMutation) iDLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (uuid.UUID, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.iDType = TypeLazy
		m.iDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetID(value)

			i.ID = value
			return nil
		}
	}
}
func (*entBosslistMutation) iDDefaultMutateFunc(v uuid.UUID) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.iDType = TypeDefault
		m.iDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetID(v)

			i.ID = v
			return nil
		}
	}
}
func (*entBosslistMutation) iDFactoryMutateFunc(fn func(ctx context.Context) (uuid.UUID, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.iDType = TypeFactory
		m.iDFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetID(value)

			i.ID = value

			return nil
		}
	}
}

// SetIDSequence register a function which accept a sequence counter and set return value to ID field
func (f *EntBosslistMetaFactory) SetIDSequence(fn func(ctx context.Context, i int) (uuid.UUID, error)) *EntBosslistMetaFactory {
	f.mutation.iDSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetIDLazy register a function which accept the build struct and set return value to ID field
func (f *EntBosslistMetaFactory) SetIDLazy(fn func(ctx context.Context, i *EntBosslistMutator) (uuid.UUID, error)) *EntBosslistMetaFactory {
	f.mutation.iDLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetIDDefault assign a default value to ID field
func (f *EntBosslistMetaFactory) SetIDDefault(v uuid.UUID) *EntBosslistMetaFactory {
	f.mutation.iDDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetIDFactory register a factory function and assign return value to ID, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetIDFactory(fn func(ctx context.Context) (uuid.UUID, error)) *EntBosslistMetaFactory {
	f.mutation.iDFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetIDSequence register a function which accept a sequence counter and set return value to ID field
func (t *entBosslistTrait) SetIDSequence(fn func(ctx context.Context, i int) (uuid.UUID, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.iDSequenceMutateFunc(fn))
	return t
}

// SetIDLazy register a function which accept the build struct and set return value to ID field
func (t *entBosslistTrait) SetIDLazy(fn func(ctx context.Context, i *EntBosslistMutator) (uuid.UUID, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.iDLazyMutateFunc(fn))
	return t
}

// SetIDDefault assign a default value to ID field
func (t *entBosslistTrait) SetIDDefault(v uuid.UUID) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.iDDefaultMutateFunc(v))
	return t
}

// SetIDFactory register a factory function and assign return value to ID, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetIDFactory(fn func(ctx context.Context) (uuid.UUID, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.iDFactoryMutateFunc(fn))
	return t
}

func (*entBosslistMutation) startsAtSequenceMutateFunc(fn func(ctx context.Context, i int) (time.Time, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.startsAtType = TypeSequence
		m.startsAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetStartsAt(value)

			i.StartsAt = value
			return nil
		}
	}
}
func (*entBosslistMutation) startsAtLazyMutateFunc(fn func(ctx context.Context, i *EntBosslistMutator) (time.Time, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.startsAtType = TypeLazy
		m.startsAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetStartsAt(value)

			i.StartsAt = value
			return nil
		}
	}
}
func (*entBosslistMutation) startsAtDefaultMutateFunc(v time.Time) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.startsAtType = TypeDefault
		m.startsAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {

			i.EntCreator().SetStartsAt(v)

			i.StartsAt = v
			return nil
		}
	}
}
func (*entBosslistMutation) startsAtFactoryMutateFunc(fn func(ctx context.Context) (time.Time, error)) func(m *entBosslistMutation) {
	return func(m *entBosslistMutation) {
		m.startsAtType = TypeFactory
		m.startsAtFunc = func(ctx context.Context, i *EntBosslistMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetStartsAt(value)

			i.StartsAt = value

			return nil
		}
	}
}

// SetStartsAtSequence register a function which accept a sequence counter and set return value to StartsAt field
func (f *EntBosslistMetaFactory) SetStartsAtSequence(fn func(ctx context.Context, i int) (time.Time, error)) *EntBosslistMetaFactory {
	f.mutation.startsAtSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetStartsAtLazy register a function which accept the build struct and set return value to StartsAt field
func (f *EntBosslistMetaFactory) SetStartsAtLazy(fn func(ctx context.Context, i *EntBosslistMutator) (time.Time, error)) *EntBosslistMetaFactory {
	f.mutation.startsAtLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetStartsAtDefault assign a default value to StartsAt field
func (f *EntBosslistMetaFactory) SetStartsAtDefault(v time.Time) *EntBosslistMetaFactory {
	f.mutation.startsAtDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetStartsAtFactory register a factory function and assign return value to StartsAt, you can also use related factory's Create/CreateV as input function here
func (f *EntBosslistMetaFactory) SetStartsAtFactory(fn func(ctx context.Context) (time.Time, error)) *EntBosslistMetaFactory {
	f.mutation.startsAtFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetStartsAtSequence register a function which accept a sequence counter and set return value to StartsAt field
func (t *entBosslistTrait) SetStartsAtSequence(fn func(ctx context.Context, i int) (time.Time, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.startsAtSequenceMutateFunc(fn))
	return t
}

// SetStartsAtLazy register a function which accept the build struct and set return value to StartsAt field
func (t *entBosslistTrait) SetStartsAtLazy(fn func(ctx context.Context, i *EntBosslistMutator) (time.Time, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.startsAtLazyMutateFunc(fn))
	return t
}

// SetStartsAtDefault assign a default value to StartsAt field
func (t *entBosslistTrait) SetStartsAtDefault(v time.Time) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.startsAtDefaultMutateFunc(v))
	return t
}

// SetStartsAtFactory register a factory function and assign return value to StartsAt, you can also use related factory's Create/CreateV as input function here
func (t *entBosslistTrait) SetStartsAtFactory(fn func(ctx context.Context) (time.Time, error)) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.startsAtFactoryMutateFunc(fn))
	return t
}

// SetAfterCreateFunc register a function to be called after struct create
func (f *EntBosslistMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.Bosslist) error) *EntBosslistMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}

// SetBeforeCreateFunc register a function to be called before struct create
func (f *EntBosslistMetaFactory) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntBosslistMutator) error) *EntBosslistMetaFactory {
	f.mutation.beforeCreateFunc = fn
	return f
}

// SetAfterCreateFunc register a function to be called after struct create
func (t *entBosslistTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.Bosslist) error) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

// SetBeforeCreateFunc register a function to be called before struct create
func (t *entBosslistTrait) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntBosslistMutator) error) *entBosslistTrait {
	t.updates = append(t.updates, t.mutation.beforeCreateMutateFunc(fn))
	return t
}

// Build create a  EntBosslistFactory from EntBosslistMetaFactory
func (f *EntBosslistMetaFactory) Build() *EntBosslistFactory {
	return &EntBosslistFactory{meta: *f, counter: &Counter{}}
}

type EntBosslistFactory struct {
	meta    EntBosslistMetaFactory
	counter *Counter

	client *ent.Client
}

// SetBoss set the Boss field
func (f *EntBosslistFactory) SetBoss(i *ent.Boss) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetBoss(i)

	builder.client = f.client

	return builder
}

// SetBossID set the BossID field
func (f *EntBosslistFactory) SetBossID(i uuid.UUID) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetBossID(i)

	builder.client = f.client

	return builder
}

// SetCreatedAt set the CreatedAt field
func (f *EntBosslistFactory) SetCreatedAt(i time.Time) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetCreatedAt(i)

	builder.client = f.client

	return builder
}

// SetCustomTemplate set the CustomTemplate field
func (f *EntBosslistFactory) SetCustomTemplate(i string) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetCustomTemplate(i)

	builder.client = f.client

	return builder
}

// SetDiscordMessageID set the DiscordMessageID field
func (f *EntBosslistFactory) SetDiscordMessageID(i string) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetDiscordMessageID(i)

	builder.client = f.client

	return builder
}

// SetID set the ID field
func (f *EntBosslistFactory) SetID(i uuid.UUID) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetID(i)

	builder.client = f.client

	return builder
}

// SetStartsAt set the StartsAt field
func (f *EntBosslistFactory) SetStartsAt(i time.Time) *EntBosslistBuilder {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetStartsAt(i)

	builder.client = f.client

	return builder
}

// Create return a new *ent.Bosslist
func (f *EntBosslistFactory) Create(ctx context.Context) (*ent.Bosslist, error) {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.Create(ctx)
}

// CreateV return a new ent.Bosslist
func (f *EntBosslistFactory) CreateV(ctx context.Context) (ent.Bosslist, error) {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateV(ctx)
}

// CreateBatch return a []*ent.Bosslist slice
func (f *EntBosslistFactory) CreateBatch(ctx context.Context, n int) ([]*ent.Bosslist, error) {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatch(ctx, n)
}

// CreateBatchV return a []ent.Bosslist slice
func (f *EntBosslistFactory) CreateBatchV(ctx context.Context, n int) ([]ent.Bosslist, error) {
	builder := &EntBosslistBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatchV(ctx, n)
}

// Client set ent client to EntBosslistFactory
func (f *EntBosslistFactory) Client(c *ent.Client) *EntBosslistFactory {
	f.client = c
	return f
}

type EntBosslistBuilder struct {
	factory  *EntBosslistFactory
	mutation entBosslistMutation
	counter  *Counter

	bossOverride  *ent.Boss
	bossOverriden bool

	bossIDOverride  uuid.UUID
	bossIDOverriden bool

	createdAtOverride  time.Time
	createdAtOverriden bool

	customTemplateOverride  string
	customTemplateOverriden bool

	discordMessageIDOverride  string
	discordMessageIDOverriden bool

	iDOverride  uuid.UUID
	iDOverriden bool

	startsAtOverride  time.Time
	startsAtOverriden bool

	client *ent.Client
}

func (b *EntBosslistBuilder) Client(c *ent.Client) *EntBosslistBuilder {
	b.client = c
	return b
}

// SetBoss set the Boss field
func (b *EntBosslistBuilder) SetBoss(i *ent.Boss) *EntBosslistBuilder {
	b.bossOverride = i
	b.bossOverriden = true
	return b
}

// SetBossID set the BossID field
func (b *EntBosslistBuilder) SetBossID(i uuid.UUID) *EntBosslistBuilder {
	b.bossIDOverride = i
	b.bossIDOverriden = true
	return b
}

// SetCreatedAt set the CreatedAt field
func (b *EntBosslistBuilder) SetCreatedAt(i time.Time) *EntBosslistBuilder {
	b.createdAtOverride = i
	b.createdAtOverriden = true
	return b
}

// SetCustomTemplate set the CustomTemplate field
func (b *EntBosslistBuilder) SetCustomTemplate(i string) *EntBosslistBuilder {
	b.customTemplateOverride = i
	b.customTemplateOverriden = true
	return b
}

// SetDiscordMessageID set the DiscordMessageID field
func (b *EntBosslistBuilder) SetDiscordMessageID(i string) *EntBosslistBuilder {
	b.discordMessageIDOverride = i
	b.discordMessageIDOverriden = true
	return b
}

// SetID set the ID field
func (b *EntBosslistBuilder) SetID(i uuid.UUID) *EntBosslistBuilder {
	b.iDOverride = i
	b.iDOverriden = true
	return b
}

// SetStartsAt set the StartsAt field
func (b *EntBosslistBuilder) SetStartsAt(i time.Time) *EntBosslistBuilder {
	b.startsAtOverride = i
	b.startsAtOverriden = true
	return b
}

// CreateV return a new ent.Bosslist
func (b *EntBosslistBuilder) CreateV(ctx context.Context) (ent.Bosslist, error) {
	var d ent.Bosslist
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

// Create return a new *ent.Bosslist
func (b *EntBosslistBuilder) Create(ctx context.Context) (*ent.Bosslist, error) {

	var preSlice = []func(ctx context.Context, i *EntBosslistMutator, c int) error{}
	var lazySlice = []func(ctx context.Context, i *EntBosslistMutator, c int) error{}
	var postSlice = []func(ctx context.Context, i *ent.Bosslist, c int) error{}

	index := b.counter.Get()
	_ = index

	client := b.client
	entBuilder := client.Bosslist.Create()

	if b.bossOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.bossOverride

			i.EntCreator().SetBoss(value)

			i.Boss = value
			return nil
		})
	} else {
		switch b.mutation.bossType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.bossFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.bossFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.bossFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.bossFunc)
		}
	}

	if b.bossIDOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.bossIDOverride

			i.EntCreator().SetBossID(value)

			i.BossID = value
			return nil
		})
	} else {
		switch b.mutation.bossIDType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.bossIDFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.bossIDFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.bossIDFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.bossIDFunc)
		}
	}

	if b.createdAtOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.createdAtOverride

			i.EntCreator().SetCreatedAt(value)

			i.CreatedAt = value
			return nil
		})
	} else {
		switch b.mutation.createdAtType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.createdAtFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.createdAtFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.createdAtFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.createdAtFunc)
		}
	}

	if b.customTemplateOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.customTemplateOverride

			i.EntCreator().SetCustomTemplate(value)

			i.CustomTemplate = value
			return nil
		})
	} else {
		switch b.mutation.customTemplateType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.customTemplateFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.customTemplateFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.customTemplateFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.customTemplateFunc)
		}
	}

	if b.discordMessageIDOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.discordMessageIDOverride

			i.EntCreator().SetDiscordMessageID(value)

			i.DiscordMessageID = value
			return nil
		})
	} else {
		switch b.mutation.discordMessageIDType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.discordMessageIDFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.discordMessageIDFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.discordMessageIDFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.discordMessageIDFunc)
		}
	}

	if b.iDOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.iDOverride

			i.EntCreator().SetID(value)

			i.ID = value
			return nil
		})
	} else {
		switch b.mutation.iDType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.iDFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.iDFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.iDFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.iDFunc)
		}
	}

	if b.startsAtOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntBosslistMutator, c int) error {
			value := b.startsAtOverride

			i.EntCreator().SetStartsAt(value)

			i.StartsAt = value
			return nil
		})
	} else {
		switch b.mutation.startsAtType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.startsAtFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.startsAtFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.startsAtFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.startsAtFunc)
		}
	}

	v := &EntBosslistMutator{}

	v._creator = entBuilder

	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	if b.mutation.beforeCreateFunc != nil {
		if err := b.mutation.beforeCreateFunc(ctx, v); err != nil {
			return nil, err
		}
	}

	new, err := entBuilder.Save(ctx)
	if err != nil {
		return nil, err
	}

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {
		err := f(ctx, new, index)
		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *EntBosslistBuilder) CreateBatch(ctx context.Context, n int) ([]*ent.Bosslist, error) {
	var results []*ent.Bosslist
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *EntBosslistBuilder) CreateBatchV(ctx context.Context, n int) ([]ent.Bosslist, error) {
	var results []ent.Bosslist
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
