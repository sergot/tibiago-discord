// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/boss"
	"github.com/sergot/tibiago/ent/bosslist"
	"github.com/sergot/tibiago/ent/participant"
	"github.com/sergot/tibiago/ent/predicate"
)

// BosslistUpdate is the builder for updating Bosslist entities.
type BosslistUpdate struct {
	config
	hooks    []Hook
	mutation *BosslistMutation
}

// Where appends a list predicates to the BosslistUpdate builder.
func (bu *BosslistUpdate) Where(ps ...predicate.Bosslist) *BosslistUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BosslistUpdate) SetCreatedAt(t time.Time) *BosslistUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BosslistUpdate) SetNillableCreatedAt(t *time.Time) *BosslistUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetStartsAt sets the "starts_at" field.
func (bu *BosslistUpdate) SetStartsAt(t time.Time) *BosslistUpdate {
	bu.mutation.SetStartsAt(t)
	return bu
}

// SetCustomTemplate sets the "custom_template" field.
func (bu *BosslistUpdate) SetCustomTemplate(s string) *BosslistUpdate {
	bu.mutation.SetCustomTemplate(s)
	return bu
}

// SetNillableCustomTemplate sets the "custom_template" field if the given value is not nil.
func (bu *BosslistUpdate) SetNillableCustomTemplate(s *string) *BosslistUpdate {
	if s != nil {
		bu.SetCustomTemplate(*s)
	}
	return bu
}

// ClearCustomTemplate clears the value of the "custom_template" field.
func (bu *BosslistUpdate) ClearCustomTemplate() *BosslistUpdate {
	bu.mutation.ClearCustomTemplate()
	return bu
}

// SetDiscordMessageID sets the "discord_message_id" field.
func (bu *BosslistUpdate) SetDiscordMessageID(s string) *BosslistUpdate {
	bu.mutation.SetDiscordMessageID(s)
	return bu
}

// SetNillableDiscordMessageID sets the "discord_message_id" field if the given value is not nil.
func (bu *BosslistUpdate) SetNillableDiscordMessageID(s *string) *BosslistUpdate {
	if s != nil {
		bu.SetDiscordMessageID(*s)
	}
	return bu
}

// ClearDiscordMessageID clears the value of the "discord_message_id" field.
func (bu *BosslistUpdate) ClearDiscordMessageID() *BosslistUpdate {
	bu.mutation.ClearDiscordMessageID()
	return bu
}

// SetBossID sets the "boss" edge to the Boss entity by ID.
func (bu *BosslistUpdate) SetBossID(id uuid.UUID) *BosslistUpdate {
	bu.mutation.SetBossID(id)
	return bu
}

// SetNillableBossID sets the "boss" edge to the Boss entity by ID if the given value is not nil.
func (bu *BosslistUpdate) SetNillableBossID(id *uuid.UUID) *BosslistUpdate {
	if id != nil {
		bu = bu.SetBossID(*id)
	}
	return bu
}

// SetBoss sets the "boss" edge to the Boss entity.
func (bu *BosslistUpdate) SetBoss(b *Boss) *BosslistUpdate {
	return bu.SetBossID(b.ID)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (bu *BosslistUpdate) AddParticipantIDs(ids ...uuid.UUID) *BosslistUpdate {
	bu.mutation.AddParticipantIDs(ids...)
	return bu
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (bu *BosslistUpdate) AddParticipants(p ...*Participant) *BosslistUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddParticipantIDs(ids...)
}

// Mutation returns the BosslistMutation object of the builder.
func (bu *BosslistUpdate) Mutation() *BosslistMutation {
	return bu.mutation
}

// ClearBoss clears the "boss" edge to the Boss entity.
func (bu *BosslistUpdate) ClearBoss() *BosslistUpdate {
	bu.mutation.ClearBoss()
	return bu
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (bu *BosslistUpdate) ClearParticipants() *BosslistUpdate {
	bu.mutation.ClearParticipants()
	return bu
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (bu *BosslistUpdate) RemoveParticipantIDs(ids ...uuid.UUID) *BosslistUpdate {
	bu.mutation.RemoveParticipantIDs(ids...)
	return bu
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (bu *BosslistUpdate) RemoveParticipants(p ...*Participant) *BosslistUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BosslistUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BosslistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BosslistUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BosslistUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BosslistUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BosslistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bosslist.Table,
			Columns: bosslist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bosslist.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bosslist.FieldCreatedAt,
		})
	}
	if value, ok := bu.mutation.StartsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bosslist.FieldStartsAt,
		})
	}
	if value, ok := bu.mutation.CustomTemplate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bosslist.FieldCustomTemplate,
		})
	}
	if bu.mutation.CustomTemplateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bosslist.FieldCustomTemplate,
		})
	}
	if value, ok := bu.mutation.DiscordMessageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bosslist.FieldDiscordMessageID,
		})
	}
	if bu.mutation.DiscordMessageIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bosslist.FieldDiscordMessageID,
		})
	}
	if bu.mutation.BossCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bosslist.BossTable,
			Columns: []string{bosslist.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: boss.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BossIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bosslist.BossTable,
			Columns: []string{bosslist.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: boss.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !bu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bosslist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BosslistUpdateOne is the builder for updating a single Bosslist entity.
type BosslistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BosslistMutation
}

// SetCreatedAt sets the "created_at" field.
func (buo *BosslistUpdateOne) SetCreatedAt(t time.Time) *BosslistUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BosslistUpdateOne) SetNillableCreatedAt(t *time.Time) *BosslistUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetStartsAt sets the "starts_at" field.
func (buo *BosslistUpdateOne) SetStartsAt(t time.Time) *BosslistUpdateOne {
	buo.mutation.SetStartsAt(t)
	return buo
}

// SetCustomTemplate sets the "custom_template" field.
func (buo *BosslistUpdateOne) SetCustomTemplate(s string) *BosslistUpdateOne {
	buo.mutation.SetCustomTemplate(s)
	return buo
}

// SetNillableCustomTemplate sets the "custom_template" field if the given value is not nil.
func (buo *BosslistUpdateOne) SetNillableCustomTemplate(s *string) *BosslistUpdateOne {
	if s != nil {
		buo.SetCustomTemplate(*s)
	}
	return buo
}

// ClearCustomTemplate clears the value of the "custom_template" field.
func (buo *BosslistUpdateOne) ClearCustomTemplate() *BosslistUpdateOne {
	buo.mutation.ClearCustomTemplate()
	return buo
}

// SetDiscordMessageID sets the "discord_message_id" field.
func (buo *BosslistUpdateOne) SetDiscordMessageID(s string) *BosslistUpdateOne {
	buo.mutation.SetDiscordMessageID(s)
	return buo
}

// SetNillableDiscordMessageID sets the "discord_message_id" field if the given value is not nil.
func (buo *BosslistUpdateOne) SetNillableDiscordMessageID(s *string) *BosslistUpdateOne {
	if s != nil {
		buo.SetDiscordMessageID(*s)
	}
	return buo
}

// ClearDiscordMessageID clears the value of the "discord_message_id" field.
func (buo *BosslistUpdateOne) ClearDiscordMessageID() *BosslistUpdateOne {
	buo.mutation.ClearDiscordMessageID()
	return buo
}

// SetBossID sets the "boss" edge to the Boss entity by ID.
func (buo *BosslistUpdateOne) SetBossID(id uuid.UUID) *BosslistUpdateOne {
	buo.mutation.SetBossID(id)
	return buo
}

// SetNillableBossID sets the "boss" edge to the Boss entity by ID if the given value is not nil.
func (buo *BosslistUpdateOne) SetNillableBossID(id *uuid.UUID) *BosslistUpdateOne {
	if id != nil {
		buo = buo.SetBossID(*id)
	}
	return buo
}

// SetBoss sets the "boss" edge to the Boss entity.
func (buo *BosslistUpdateOne) SetBoss(b *Boss) *BosslistUpdateOne {
	return buo.SetBossID(b.ID)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (buo *BosslistUpdateOne) AddParticipantIDs(ids ...uuid.UUID) *BosslistUpdateOne {
	buo.mutation.AddParticipantIDs(ids...)
	return buo
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (buo *BosslistUpdateOne) AddParticipants(p ...*Participant) *BosslistUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddParticipantIDs(ids...)
}

// Mutation returns the BosslistMutation object of the builder.
func (buo *BosslistUpdateOne) Mutation() *BosslistMutation {
	return buo.mutation
}

// ClearBoss clears the "boss" edge to the Boss entity.
func (buo *BosslistUpdateOne) ClearBoss() *BosslistUpdateOne {
	buo.mutation.ClearBoss()
	return buo
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (buo *BosslistUpdateOne) ClearParticipants() *BosslistUpdateOne {
	buo.mutation.ClearParticipants()
	return buo
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (buo *BosslistUpdateOne) RemoveParticipantIDs(ids ...uuid.UUID) *BosslistUpdateOne {
	buo.mutation.RemoveParticipantIDs(ids...)
	return buo
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (buo *BosslistUpdateOne) RemoveParticipants(p ...*Participant) *BosslistUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveParticipantIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BosslistUpdateOne) Select(field string, fields ...string) *BosslistUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bosslist entity.
func (buo *BosslistUpdateOne) Save(ctx context.Context) (*Bosslist, error) {
	var (
		err  error
		node *Bosslist
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BosslistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Bosslist)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BosslistMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BosslistUpdateOne) SaveX(ctx context.Context) *Bosslist {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BosslistUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BosslistUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BosslistUpdateOne) sqlSave(ctx context.Context) (_node *Bosslist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bosslist.Table,
			Columns: bosslist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bosslist.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bosslist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bosslist.FieldID)
		for _, f := range fields {
			if !bosslist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bosslist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bosslist.FieldCreatedAt,
		})
	}
	if value, ok := buo.mutation.StartsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bosslist.FieldStartsAt,
		})
	}
	if value, ok := buo.mutation.CustomTemplate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bosslist.FieldCustomTemplate,
		})
	}
	if buo.mutation.CustomTemplateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bosslist.FieldCustomTemplate,
		})
	}
	if value, ok := buo.mutation.DiscordMessageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bosslist.FieldDiscordMessageID,
		})
	}
	if buo.mutation.DiscordMessageIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bosslist.FieldDiscordMessageID,
		})
	}
	if buo.mutation.BossCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bosslist.BossTable,
			Columns: []string{bosslist.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: boss.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BossIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bosslist.BossTable,
			Columns: []string{bosslist.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: boss.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !buo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bosslist{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bosslist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
