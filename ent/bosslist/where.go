// Code generated by ent, DO NOT EDIT.

package bosslist

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// StartsAt applies equality check predicate on the "starts_at" field. It's identical to StartsAtEQ.
func StartsAt(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartsAt), v))
	})
}

// CustomTemplate applies equality check predicate on the "custom_template" field. It's identical to CustomTemplateEQ.
func CustomTemplate(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomTemplate), v))
	})
}

// DiscordMessageID applies equality check predicate on the "discord_message_id" field. It's identical to DiscordMessageIDEQ.
func DiscordMessageID(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordMessageID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// StartsAtEQ applies the EQ predicate on the "starts_at" field.
func StartsAtEQ(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartsAt), v))
	})
}

// StartsAtNEQ applies the NEQ predicate on the "starts_at" field.
func StartsAtNEQ(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartsAt), v))
	})
}

// StartsAtIn applies the In predicate on the "starts_at" field.
func StartsAtIn(vs ...time.Time) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartsAt), v...))
	})
}

// StartsAtNotIn applies the NotIn predicate on the "starts_at" field.
func StartsAtNotIn(vs ...time.Time) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartsAt), v...))
	})
}

// StartsAtGT applies the GT predicate on the "starts_at" field.
func StartsAtGT(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartsAt), v))
	})
}

// StartsAtGTE applies the GTE predicate on the "starts_at" field.
func StartsAtGTE(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartsAt), v))
	})
}

// StartsAtLT applies the LT predicate on the "starts_at" field.
func StartsAtLT(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartsAt), v))
	})
}

// StartsAtLTE applies the LTE predicate on the "starts_at" field.
func StartsAtLTE(v time.Time) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartsAt), v))
	})
}

// CustomTemplateEQ applies the EQ predicate on the "custom_template" field.
func CustomTemplateEQ(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateNEQ applies the NEQ predicate on the "custom_template" field.
func CustomTemplateNEQ(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateIn applies the In predicate on the "custom_template" field.
func CustomTemplateIn(vs ...string) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomTemplate), v...))
	})
}

// CustomTemplateNotIn applies the NotIn predicate on the "custom_template" field.
func CustomTemplateNotIn(vs ...string) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomTemplate), v...))
	})
}

// CustomTemplateGT applies the GT predicate on the "custom_template" field.
func CustomTemplateGT(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateGTE applies the GTE predicate on the "custom_template" field.
func CustomTemplateGTE(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateLT applies the LT predicate on the "custom_template" field.
func CustomTemplateLT(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateLTE applies the LTE predicate on the "custom_template" field.
func CustomTemplateLTE(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateContains applies the Contains predicate on the "custom_template" field.
func CustomTemplateContains(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateHasPrefix applies the HasPrefix predicate on the "custom_template" field.
func CustomTemplateHasPrefix(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateHasSuffix applies the HasSuffix predicate on the "custom_template" field.
func CustomTemplateHasSuffix(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateIsNil applies the IsNil predicate on the "custom_template" field.
func CustomTemplateIsNil() predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCustomTemplate)))
	})
}

// CustomTemplateNotNil applies the NotNil predicate on the "custom_template" field.
func CustomTemplateNotNil() predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCustomTemplate)))
	})
}

// CustomTemplateEqualFold applies the EqualFold predicate on the "custom_template" field.
func CustomTemplateEqualFold(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomTemplate), v))
	})
}

// CustomTemplateContainsFold applies the ContainsFold predicate on the "custom_template" field.
func CustomTemplateContainsFold(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomTemplate), v))
	})
}

// DiscordMessageIDEQ applies the EQ predicate on the "discord_message_id" field.
func DiscordMessageIDEQ(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDNEQ applies the NEQ predicate on the "discord_message_id" field.
func DiscordMessageIDNEQ(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDIn applies the In predicate on the "discord_message_id" field.
func DiscordMessageIDIn(vs ...string) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscordMessageID), v...))
	})
}

// DiscordMessageIDNotIn applies the NotIn predicate on the "discord_message_id" field.
func DiscordMessageIDNotIn(vs ...string) predicate.Bosslist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscordMessageID), v...))
	})
}

// DiscordMessageIDGT applies the GT predicate on the "discord_message_id" field.
func DiscordMessageIDGT(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDGTE applies the GTE predicate on the "discord_message_id" field.
func DiscordMessageIDGTE(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDLT applies the LT predicate on the "discord_message_id" field.
func DiscordMessageIDLT(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDLTE applies the LTE predicate on the "discord_message_id" field.
func DiscordMessageIDLTE(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDContains applies the Contains predicate on the "discord_message_id" field.
func DiscordMessageIDContains(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDHasPrefix applies the HasPrefix predicate on the "discord_message_id" field.
func DiscordMessageIDHasPrefix(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDHasSuffix applies the HasSuffix predicate on the "discord_message_id" field.
func DiscordMessageIDHasSuffix(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDIsNil applies the IsNil predicate on the "discord_message_id" field.
func DiscordMessageIDIsNil() predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiscordMessageID)))
	})
}

// DiscordMessageIDNotNil applies the NotNil predicate on the "discord_message_id" field.
func DiscordMessageIDNotNil() predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiscordMessageID)))
	})
}

// DiscordMessageIDEqualFold applies the EqualFold predicate on the "discord_message_id" field.
func DiscordMessageIDEqualFold(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordMessageID), v))
	})
}

// DiscordMessageIDContainsFold applies the ContainsFold predicate on the "discord_message_id" field.
func DiscordMessageIDContainsFold(v string) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordMessageID), v))
	})
}

// HasBoss applies the HasEdge predicate on the "boss" edge.
func HasBoss() predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BossTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BossTable, BossColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBossWith applies the HasEdge predicate on the "boss" edge with a given conditions (other predicates).
func HasBossWith(preds ...predicate.Boss) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BossInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BossTable, BossColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipants applies the HasEdge predicate on the "participants" edge.
func HasParticipants() predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParticipantsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ParticipantsTable, ParticipantsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantsWith applies the HasEdge predicate on the "participants" edge with a given conditions (other predicates).
func HasParticipantsWith(preds ...predicate.Participant) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParticipantsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ParticipantsTable, ParticipantsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bosslist) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bosslist) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bosslist) predicate.Bosslist {
	return predicate.Bosslist(func(s *sql.Selector) {
		p(s.Not())
	})
}
