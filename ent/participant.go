// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/participant"
)

// Participant is the model entity for the Participant schema.
type Participant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Vocation holds the value of the "vocation" field.
	Vocation participant.Vocation `json:"vocation,omitempty"`
	// DiscordID holds the value of the "discord_id" field.
	DiscordID string `json:"discord_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipantQuery when eager-loading is set.
	Edges ParticipantEdges `json:"edges"`
}

// ParticipantEdges holds the relations/edges for other nodes in the graph.
type ParticipantEdges struct {
	// Bosslist holds the value of the bosslist edge.
	Bosslist []*Bosslist `json:"bosslist,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BosslistOrErr returns the Bosslist value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) BosslistOrErr() ([]*Bosslist, error) {
	if e.loadedTypes[0] {
		return e.Bosslist, nil
	}
	return nil, &NotLoadedError{edge: "bosslist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case participant.FieldVocation, participant.FieldDiscordID:
			values[i] = new(sql.NullString)
		case participant.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Participant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participant fields.
func (pa *Participant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case participant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case participant.FieldVocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vocation", values[i])
			} else if value.Valid {
				pa.Vocation = participant.Vocation(value.String)
			}
		case participant.FieldDiscordID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_id", values[i])
			} else if value.Valid {
				pa.DiscordID = value.String
			}
		}
	}
	return nil
}

// QueryBosslist queries the "bosslist" edge of the Participant entity.
func (pa *Participant) QueryBosslist() *BosslistQuery {
	return (&ParticipantClient{config: pa.config}).QueryBosslist(pa)
}

// Update returns a builder for updating this Participant.
// Note that you need to call Participant.Unwrap() before calling this method if this Participant
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participant) Update() *ParticipantUpdateOne {
	return (&ParticipantClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Participant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Participant) Unwrap() *Participant {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participant is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participant) String() string {
	var builder strings.Builder
	builder.WriteString("Participant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("vocation=")
	builder.WriteString(fmt.Sprintf("%v", pa.Vocation))
	builder.WriteString(", ")
	builder.WriteString("discord_id=")
	builder.WriteString(pa.DiscordID)
	builder.WriteByte(')')
	return builder.String()
}

// Participants is a parsable slice of Participant.
type Participants []*Participant

func (pa Participants) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
