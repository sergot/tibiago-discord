// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/boss"
)

// Boss is the model entity for the Boss schema.
type Boss struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Template holds the value of the "template" field.
	Template string `json:"template,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BossQuery when eager-loading is set.
	Edges BossEdges `json:"edges"`
}

// BossEdges holds the relations/edges for other nodes in the graph.
type BossEdges struct {
	// Bosslists holds the value of the bosslists edge.
	Bosslists []*Bosslist `json:"bosslists,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BosslistsOrErr returns the Bosslists value or an error if the edge
// was not loaded in eager-loading.
func (e BossEdges) BosslistsOrErr() ([]*Bosslist, error) {
	if e.loadedTypes[0] {
		return e.Bosslists, nil
	}
	return nil, &NotLoadedError{edge: "bosslists"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Boss) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case boss.FieldName, boss.FieldTemplate:
			values[i] = new(sql.NullString)
		case boss.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Boss", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Boss fields.
func (b *Boss) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case boss.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case boss.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case boss.FieldTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template", values[i])
			} else if value.Valid {
				b.Template = value.String
			}
		}
	}
	return nil
}

// QueryBosslists queries the "bosslists" edge of the Boss entity.
func (b *Boss) QueryBosslists() *BosslistQuery {
	return (&BossClient{config: b.config}).QueryBosslists(b)
}

// Update returns a builder for updating this Boss.
// Note that you need to call Boss.Unwrap() before calling this method if this Boss
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Boss) Update() *BossUpdateOne {
	return (&BossClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Boss entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Boss) Unwrap() *Boss {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Boss is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Boss) String() string {
	var builder strings.Builder
	builder.WriteString("Boss(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("template=")
	builder.WriteString(b.Template)
	builder.WriteByte(')')
	return builder.String()
}

// Bosses is a parsable slice of Boss.
type Bosses []*Boss

func (b Bosses) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
