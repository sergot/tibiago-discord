// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/boss"
	"github.com/sergot/tibiago/ent/bosslist"
)

// BossCreate is the builder for creating a Boss entity.
type BossCreate struct {
	config
	mutation *BossMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BossCreate) SetName(s string) *BossCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetTemplate sets the "template" field.
func (bc *BossCreate) SetTemplate(s string) *BossCreate {
	bc.mutation.SetTemplate(s)
	return bc
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (bc *BossCreate) SetNillableTemplate(s *string) *BossCreate {
	if s != nil {
		bc.SetTemplate(*s)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BossCreate) SetID(u uuid.UUID) *BossCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BossCreate) SetNillableID(u *uuid.UUID) *BossCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddBosslistIDs adds the "bosslists" edge to the Bosslist entity by IDs.
func (bc *BossCreate) AddBosslistIDs(ids ...uuid.UUID) *BossCreate {
	bc.mutation.AddBosslistIDs(ids...)
	return bc
}

// AddBosslists adds the "bosslists" edges to the Bosslist entity.
func (bc *BossCreate) AddBosslists(b ...*Bosslist) *BossCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBosslistIDs(ids...)
}

// Mutation returns the BossMutation object of the builder.
func (bc *BossCreate) Mutation() *BossMutation {
	return bc.mutation
}

// Save creates the Boss in the database.
func (bc *BossCreate) Save(ctx context.Context) (*Boss, error) {
	var (
		err  error
		node *Boss
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BossMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Boss)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BossMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BossCreate) SaveX(ctx context.Context) *Boss {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BossCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BossCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BossCreate) defaults() {
	if _, ok := bc.mutation.Template(); !ok {
		v := boss.DefaultTemplate
		bc.mutation.SetTemplate(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := boss.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BossCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Boss.name"`)}
	}
	if _, ok := bc.mutation.Template(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required field "Boss.template"`)}
	}
	return nil
}

func (bc *BossCreate) sqlSave(ctx context.Context) (*Boss, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (bc *BossCreate) createSpec() (*Boss, *sqlgraph.CreateSpec) {
	var (
		_node = &Boss{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: boss.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: boss.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: boss.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.Template(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: boss.FieldTemplate,
		})
		_node.Template = value
	}
	if nodes := bc.mutation.BosslistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   boss.BosslistsTable,
			Columns: []string{boss.BosslistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bosslist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BossCreateBulk is the builder for creating many Boss entities in bulk.
type BossCreateBulk struct {
	config
	builders []*BossCreate
}

// Save creates the Boss entities in the database.
func (bcb *BossCreateBulk) Save(ctx context.Context) ([]*Boss, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Boss, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BossMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BossCreateBulk) SaveX(ctx context.Context) []*Boss {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BossCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BossCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
