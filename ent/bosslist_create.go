// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/boss"
	"github.com/sergot/tibiago/ent/bosslist"
	"github.com/sergot/tibiago/ent/participant"
)

// BosslistCreate is the builder for creating a Bosslist entity.
type BosslistCreate struct {
	config
	mutation *BosslistMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BosslistCreate) SetCreatedAt(t time.Time) *BosslistCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BosslistCreate) SetNillableCreatedAt(t *time.Time) *BosslistCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetStartsAt sets the "starts_at" field.
func (bc *BosslistCreate) SetStartsAt(t time.Time) *BosslistCreate {
	bc.mutation.SetStartsAt(t)
	return bc
}

// SetCustomTemplate sets the "custom_template" field.
func (bc *BosslistCreate) SetCustomTemplate(s string) *BosslistCreate {
	bc.mutation.SetCustomTemplate(s)
	return bc
}

// SetNillableCustomTemplate sets the "custom_template" field if the given value is not nil.
func (bc *BosslistCreate) SetNillableCustomTemplate(s *string) *BosslistCreate {
	if s != nil {
		bc.SetCustomTemplate(*s)
	}
	return bc
}

// SetDiscordMessageID sets the "discord_message_id" field.
func (bc *BosslistCreate) SetDiscordMessageID(s string) *BosslistCreate {
	bc.mutation.SetDiscordMessageID(s)
	return bc
}

// SetNillableDiscordMessageID sets the "discord_message_id" field if the given value is not nil.
func (bc *BosslistCreate) SetNillableDiscordMessageID(s *string) *BosslistCreate {
	if s != nil {
		bc.SetDiscordMessageID(*s)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BosslistCreate) SetID(u uuid.UUID) *BosslistCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BosslistCreate) SetNillableID(u *uuid.UUID) *BosslistCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetBossID sets the "boss" edge to the Boss entity by ID.
func (bc *BosslistCreate) SetBossID(id uuid.UUID) *BosslistCreate {
	bc.mutation.SetBossID(id)
	return bc
}

// SetNillableBossID sets the "boss" edge to the Boss entity by ID if the given value is not nil.
func (bc *BosslistCreate) SetNillableBossID(id *uuid.UUID) *BosslistCreate {
	if id != nil {
		bc = bc.SetBossID(*id)
	}
	return bc
}

// SetBoss sets the "boss" edge to the Boss entity.
func (bc *BosslistCreate) SetBoss(b *Boss) *BosslistCreate {
	return bc.SetBossID(b.ID)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (bc *BosslistCreate) AddParticipantIDs(ids ...uuid.UUID) *BosslistCreate {
	bc.mutation.AddParticipantIDs(ids...)
	return bc
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (bc *BosslistCreate) AddParticipants(p ...*Participant) *BosslistCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddParticipantIDs(ids...)
}

// Mutation returns the BosslistMutation object of the builder.
func (bc *BosslistCreate) Mutation() *BosslistMutation {
	return bc.mutation
}

// Save creates the Bosslist in the database.
func (bc *BosslistCreate) Save(ctx context.Context) (*Bosslist, error) {
	var (
		err  error
		node *Bosslist
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BosslistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Bosslist)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BosslistMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BosslistCreate) SaveX(ctx context.Context) *Bosslist {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BosslistCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BosslistCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BosslistCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bosslist.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bosslist.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BosslistCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bosslist.created_at"`)}
	}
	if _, ok := bc.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "Bosslist.starts_at"`)}
	}
	return nil
}

func (bc *BosslistCreate) sqlSave(ctx context.Context) (*Bosslist, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (bc *BosslistCreate) createSpec() (*Bosslist, *sqlgraph.CreateSpec) {
	var (
		_node = &Bosslist{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bosslist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bosslist.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bosslist.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.StartsAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bosslist.FieldStartsAt,
		})
		_node.StartsAt = value
	}
	if value, ok := bc.mutation.CustomTemplate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bosslist.FieldCustomTemplate,
		})
		_node.CustomTemplate = value
	}
	if value, ok := bc.mutation.DiscordMessageID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bosslist.FieldDiscordMessageID,
		})
		_node.DiscordMessageID = value
	}
	if nodes := bc.mutation.BossIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bosslist.BossTable,
			Columns: []string{bosslist.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: boss.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.boss_bosslists = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bosslist.ParticipantsTable,
			Columns: bosslist.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BosslistCreateBulk is the builder for creating many Bosslist entities in bulk.
type BosslistCreateBulk struct {
	config
	builders []*BosslistCreate
}

// Save creates the Bosslist entities in the database.
func (bcb *BosslistCreateBulk) Save(ctx context.Context) ([]*Bosslist, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bosslist, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BosslistMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BosslistCreateBulk) SaveX(ctx context.Context) []*Bosslist {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BosslistCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BosslistCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
