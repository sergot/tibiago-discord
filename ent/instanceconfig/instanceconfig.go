// Code generated by ent, DO NOT EDIT.

package instanceconfig

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the instanceconfig type in the database.
	Label = "instance_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeInstance holds the string denoting the instance edge name in mutations.
	EdgeInstance = "instance"
	// Table holds the table name of the instanceconfig in the database.
	Table = "instance_configs"
	// InstanceTable is the table that holds the instance relation/edge.
	InstanceTable = "instance_configs"
	// InstanceInverseTable is the table name for the Instance entity.
	// It exists in this package in order to avoid circular dependency with the "instance" package.
	InstanceInverseTable = "instances"
	// InstanceColumn is the table column denoting the instance relation/edge.
	InstanceColumn = "instance_config"
)

// Columns holds all SQL columns for instanceconfig fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "instance_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"instance_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
