// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/instance"
	"github.com/sergot/tibiago/ent/instanceconfig"
)

// InstanceConfigCreate is the builder for creating a InstanceConfig entity.
type InstanceConfigCreate struct {
	config
	mutation *InstanceConfigMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (icc *InstanceConfigCreate) SetKey(s string) *InstanceConfigCreate {
	icc.mutation.SetKey(s)
	return icc
}

// SetValue sets the "value" field.
func (icc *InstanceConfigCreate) SetValue(s string) *InstanceConfigCreate {
	icc.mutation.SetValue(s)
	return icc
}

// SetID sets the "id" field.
func (icc *InstanceConfigCreate) SetID(u uuid.UUID) *InstanceConfigCreate {
	icc.mutation.SetID(u)
	return icc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (icc *InstanceConfigCreate) SetNillableID(u *uuid.UUID) *InstanceConfigCreate {
	if u != nil {
		icc.SetID(*u)
	}
	return icc
}

// SetInstanceID sets the "instance" edge to the Instance entity by ID.
func (icc *InstanceConfigCreate) SetInstanceID(id uuid.UUID) *InstanceConfigCreate {
	icc.mutation.SetInstanceID(id)
	return icc
}

// SetNillableInstanceID sets the "instance" edge to the Instance entity by ID if the given value is not nil.
func (icc *InstanceConfigCreate) SetNillableInstanceID(id *uuid.UUID) *InstanceConfigCreate {
	if id != nil {
		icc = icc.SetInstanceID(*id)
	}
	return icc
}

// SetInstance sets the "instance" edge to the Instance entity.
func (icc *InstanceConfigCreate) SetInstance(i *Instance) *InstanceConfigCreate {
	return icc.SetInstanceID(i.ID)
}

// Mutation returns the InstanceConfigMutation object of the builder.
func (icc *InstanceConfigCreate) Mutation() *InstanceConfigMutation {
	return icc.mutation
}

// Save creates the InstanceConfig in the database.
func (icc *InstanceConfigCreate) Save(ctx context.Context) (*InstanceConfig, error) {
	var (
		err  error
		node *InstanceConfig
	)
	icc.defaults()
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstanceConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			if node, err = icc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			if icc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, icc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InstanceConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InstanceConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *InstanceConfigCreate) SaveX(ctx context.Context) *InstanceConfig {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *InstanceConfigCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *InstanceConfigCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *InstanceConfigCreate) defaults() {
	if _, ok := icc.mutation.ID(); !ok {
		v := instanceconfig.DefaultID()
		icc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *InstanceConfigCreate) check() error {
	if _, ok := icc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "InstanceConfig.key"`)}
	}
	if _, ok := icc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "InstanceConfig.value"`)}
	}
	return nil
}

func (icc *InstanceConfigCreate) sqlSave(ctx context.Context) (*InstanceConfig, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (icc *InstanceConfigCreate) createSpec() (*InstanceConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &InstanceConfig{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: instanceconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: instanceconfig.FieldID,
			},
		}
	)
	if id, ok := icc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := icc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instanceconfig.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := icc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instanceconfig.FieldValue,
		})
		_node.Value = value
	}
	if nodes := icc.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instanceconfig.InstanceTable,
			Columns: []string{instanceconfig.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstanceConfigCreateBulk is the builder for creating many InstanceConfig entities in bulk.
type InstanceConfigCreateBulk struct {
	config
	builders []*InstanceConfigCreate
}

// Save creates the InstanceConfig entities in the database.
func (iccb *InstanceConfigCreateBulk) Save(ctx context.Context) ([]*InstanceConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*InstanceConfig, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstanceConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *InstanceConfigCreateBulk) SaveX(ctx context.Context) []*InstanceConfig {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *InstanceConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *InstanceConfigCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}
