// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/boss"
	"github.com/sergot/tibiago/ent/bosslist"
)

// Bosslist is the model entity for the Bosslist schema.
type Bosslist struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StartsAt holds the value of the "starts_at" field.
	StartsAt time.Time `json:"starts_at,omitempty"`
	// CustomTemplate holds the value of the "custom_template" field.
	CustomTemplate string `json:"custom_template,omitempty"`
	// DiscordMessageID holds the value of the "discord_message_id" field.
	DiscordMessageID string `json:"discord_message_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BosslistQuery when eager-loading is set.
	Edges          BosslistEdges `json:"edges"`
	boss_bosslists *uuid.UUID
}

// BosslistEdges holds the relations/edges for other nodes in the graph.
type BosslistEdges struct {
	// Boss holds the value of the boss edge.
	Boss *Boss `json:"boss,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*Participant `json:"participants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BossOrErr returns the Boss value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BosslistEdges) BossOrErr() (*Boss, error) {
	if e.loadedTypes[0] {
		if e.Boss == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: boss.Label}
		}
		return e.Boss, nil
	}
	return nil, &NotLoadedError{edge: "boss"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e BosslistEdges) ParticipantsOrErr() ([]*Participant, error) {
	if e.loadedTypes[1] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bosslist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bosslist.FieldCustomTemplate, bosslist.FieldDiscordMessageID:
			values[i] = new(sql.NullString)
		case bosslist.FieldCreatedAt, bosslist.FieldStartsAt:
			values[i] = new(sql.NullTime)
		case bosslist.FieldID:
			values[i] = new(uuid.UUID)
		case bosslist.ForeignKeys[0]: // boss_bosslists
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bosslist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bosslist fields.
func (b *Bosslist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bosslist.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bosslist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bosslist.FieldStartsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at", values[i])
			} else if value.Valid {
				b.StartsAt = value.Time
			}
		case bosslist.FieldCustomTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_template", values[i])
			} else if value.Valid {
				b.CustomTemplate = value.String
			}
		case bosslist.FieldDiscordMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_message_id", values[i])
			} else if value.Valid {
				b.DiscordMessageID = value.String
			}
		case bosslist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field boss_bosslists", values[i])
			} else if value.Valid {
				b.boss_bosslists = new(uuid.UUID)
				*b.boss_bosslists = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryBoss queries the "boss" edge of the Bosslist entity.
func (b *Bosslist) QueryBoss() *BossQuery {
	return (&BosslistClient{config: b.config}).QueryBoss(b)
}

// QueryParticipants queries the "participants" edge of the Bosslist entity.
func (b *Bosslist) QueryParticipants() *ParticipantQuery {
	return (&BosslistClient{config: b.config}).QueryParticipants(b)
}

// Update returns a builder for updating this Bosslist.
// Note that you need to call Bosslist.Unwrap() before calling this method if this Bosslist
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bosslist) Update() *BosslistUpdateOne {
	return (&BosslistClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bosslist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bosslist) Unwrap() *Bosslist {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bosslist is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bosslist) String() string {
	var builder strings.Builder
	builder.WriteString("Bosslist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("starts_at=")
	builder.WriteString(b.StartsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("custom_template=")
	builder.WriteString(b.CustomTemplate)
	builder.WriteString(", ")
	builder.WriteString("discord_message_id=")
	builder.WriteString(b.DiscordMessageID)
	builder.WriteByte(')')
	return builder.String()
}

// Bosslists is a parsable slice of Bosslist.
type Bosslists []*Bosslist

func (b Bosslists) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
