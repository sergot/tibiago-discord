// Code generated by ent, DO NOT EDIT.

package participant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sergot/tibiago/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// VocationEQ applies the EQ predicate on the "vocation" field.
func VocationEQ(v Vocation) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVocation), v))
	})
}

// VocationNEQ applies the NEQ predicate on the "vocation" field.
func VocationNEQ(v Vocation) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVocation), v))
	})
}

// VocationIn applies the In predicate on the "vocation" field.
func VocationIn(vs ...Vocation) predicate.Participant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVocation), v...))
	})
}

// VocationNotIn applies the NotIn predicate on the "vocation" field.
func VocationNotIn(vs ...Vocation) predicate.Participant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVocation), v...))
	})
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.Participant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.Participant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordID), v))
	})
}

// HasBosslist applies the HasEdge predicate on the "bosslist" edge.
func HasBosslist() predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BosslistTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BosslistTable, BosslistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBosslistWith applies the HasEdge predicate on the "bosslist" edge with a given conditions (other predicates).
func HasBosslistWith(preds ...predicate.Bosslist) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BosslistInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BosslistTable, BosslistColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Participant) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Participant) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Participant) predicate.Participant {
	return predicate.Participant(func(s *sql.Selector) {
		p(s.Not())
	})
}
